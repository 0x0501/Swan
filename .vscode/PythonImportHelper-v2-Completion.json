[
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "winreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winreg",
        "description": "winreg",
        "detail": "winreg",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "QSettings",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSettings",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSettings",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QFileSystemWatcher",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QAbstractTableModel",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSettings",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSettings",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSettings",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QFile",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QFile",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTextStream",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFormLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableView",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStatusBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHeaderView",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSpacerItem",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFormLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCheckBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMenu",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSystemTrayIcon",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyle",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStatusBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListView",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "ErrorDialog",
        "importPath": "src.gui.dialogs.error_dialog",
        "description": "src.gui.dialogs.error_dialog",
        "isExtraImport": true,
        "detail": "src.gui.dialogs.error_dialog",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "unique",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "unique",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Recorder",
        "importPath": "DataRecorder",
        "description": "DataRecorder",
        "isExtraImport": true,
        "detail": "DataRecorder",
        "documentation": {}
    },
    {
        "label": "Chromium",
        "importPath": "DrissionPage",
        "description": "DrissionPage",
        "isExtraImport": true,
        "detail": "DrissionPage",
        "documentation": {}
    },
    {
        "label": "ChromiumOptions",
        "importPath": "DrissionPage",
        "description": "DrissionPage",
        "isExtraImport": true,
        "detail": "DrissionPage",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "DrissionPage.errors",
        "description": "DrissionPage.errors",
        "isExtraImport": true,
        "detail": "DrissionPage.errors",
        "documentation": {}
    },
    {
        "label": "Location",
        "importPath": "src.core.location",
        "description": "src.core.location",
        "isExtraImport": true,
        "detail": "src.core.location",
        "documentation": {}
    },
    {
        "label": "Location",
        "importPath": "src.core.location",
        "description": "src.core.location",
        "isExtraImport": true,
        "detail": "src.core.location",
        "documentation": {}
    },
    {
        "label": "Location",
        "importPath": "src.core.location",
        "description": "src.core.location",
        "isExtraImport": true,
        "detail": "src.core.location",
        "documentation": {}
    },
    {
        "label": "extract_and_convert_score",
        "importPath": "src.utils.text",
        "description": "src.utils.text",
        "isExtraImport": true,
        "detail": "src.utils.text",
        "documentation": {}
    },
    {
        "label": "extract_update_date",
        "importPath": "src.utils.text",
        "description": "src.utils.text",
        "isExtraImport": true,
        "detail": "src.utils.text",
        "documentation": {}
    },
    {
        "label": "sanitize_text",
        "importPath": "src.utils.text",
        "description": "src.utils.text",
        "isExtraImport": true,
        "detail": "src.utils.text",
        "documentation": {}
    },
    {
        "label": "load_json",
        "importPath": "src.utils.text",
        "description": "src.utils.text",
        "isExtraImport": true,
        "detail": "src.utils.text",
        "documentation": {}
    },
    {
        "label": "TaskProgressTracker",
        "importPath": "src.gui.event.task_progress_tracker",
        "description": "src.gui.event.task_progress_tracker",
        "isExtraImport": true,
        "detail": "src.gui.event.task_progress_tracker",
        "documentation": {}
    },
    {
        "label": "TaskProgressTracker",
        "importPath": "src.gui.event.task_progress_tracker",
        "description": "src.gui.event.task_progress_tracker",
        "isExtraImport": true,
        "detail": "src.gui.event.task_progress_tracker",
        "documentation": {}
    },
    {
        "label": "Encryption",
        "importPath": "src.core.encryption",
        "description": "src.core.encryption",
        "isExtraImport": true,
        "detail": "src.core.encryption",
        "documentation": {}
    },
    {
        "label": "Encryption",
        "importPath": "src.core.encryption",
        "description": "src.core.encryption",
        "isExtraImport": true,
        "detail": "src.core.encryption",
        "documentation": {}
    },
    {
        "label": "Encryption",
        "importPath": "src.core.encryption",
        "description": "src.core.encryption",
        "isExtraImport": true,
        "detail": "src.core.encryption",
        "documentation": {}
    },
    {
        "label": "Encryption",
        "importPath": "src.core.encryption",
        "description": "src.core.encryption",
        "isExtraImport": true,
        "detail": "src.core.encryption",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QKeySequence",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QTextCursor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIntValidator",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QCursor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QKeySequence",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "Swan",
        "importPath": "src.core.swan",
        "description": "src.core.swan",
        "isExtraImport": true,
        "detail": "src.core.swan",
        "documentation": {}
    },
    {
        "label": "Swan",
        "importPath": "src.core.swan",
        "description": "src.core.swan",
        "isExtraImport": true,
        "detail": "src.core.swan",
        "documentation": {}
    },
    {
        "label": "Swan",
        "importPath": "src.core.swan",
        "description": "src.core.swan",
        "isExtraImport": true,
        "detail": "src.core.swan",
        "documentation": {}
    },
    {
        "label": "comment_swan_main",
        "importPath": "src.core.swan",
        "description": "src.core.swan",
        "isExtraImport": true,
        "detail": "src.core.swan",
        "documentation": {}
    },
    {
        "label": "Swan",
        "importPath": "src.core.swan",
        "description": "src.core.swan",
        "isExtraImport": true,
        "detail": "src.core.swan",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Toast",
        "importPath": "pyqttoast",
        "description": "pyqttoast",
        "isExtraImport": true,
        "detail": "pyqttoast",
        "documentation": {}
    },
    {
        "label": "ToastPreset",
        "importPath": "pyqttoast",
        "description": "pyqttoast",
        "isExtraImport": true,
        "detail": "pyqttoast",
        "documentation": {}
    },
    {
        "label": "Toast",
        "importPath": "pyqttoast",
        "description": "pyqttoast",
        "isExtraImport": true,
        "detail": "pyqttoast",
        "documentation": {}
    },
    {
        "label": "ToastPreset",
        "importPath": "pyqttoast",
        "description": "pyqttoast",
        "isExtraImport": true,
        "detail": "pyqttoast",
        "documentation": {}
    },
    {
        "label": "Toast",
        "importPath": "pyqttoast",
        "description": "pyqttoast",
        "isExtraImport": true,
        "detail": "pyqttoast",
        "documentation": {}
    },
    {
        "label": "ToastPreset",
        "importPath": "pyqttoast",
        "description": "pyqttoast",
        "isExtraImport": true,
        "detail": "pyqttoast",
        "documentation": {}
    },
    {
        "label": "ToastPosition",
        "importPath": "pyqttoast",
        "description": "pyqttoast",
        "isExtraImport": true,
        "detail": "pyqttoast",
        "documentation": {}
    },
    {
        "label": "IconLoader",
        "importPath": "src.utils.icon_loader",
        "description": "src.utils.icon_loader",
        "isExtraImport": true,
        "detail": "src.utils.icon_loader",
        "documentation": {}
    },
    {
        "label": "IconLoader",
        "importPath": "src.utils.icon_loader",
        "description": "src.utils.icon_loader",
        "isExtraImport": true,
        "detail": "src.utils.icon_loader",
        "documentation": {}
    },
    {
        "label": "IconLoader",
        "importPath": "src.utils.icon_loader",
        "description": "src.utils.icon_loader",
        "isExtraImport": true,
        "detail": "src.utils.icon_loader",
        "documentation": {}
    },
    {
        "label": "IconLoader",
        "importPath": "src.utils.icon_loader",
        "description": "src.utils.icon_loader",
        "isExtraImport": true,
        "detail": "src.utils.icon_loader",
        "documentation": {}
    },
    {
        "label": "IconLoader",
        "importPath": "src.utils.icon_loader",
        "description": "src.utils.icon_loader",
        "isExtraImport": true,
        "detail": "src.utils.icon_loader",
        "documentation": {}
    },
    {
        "label": "StyleSheetManager",
        "importPath": "src.utils.stylesheet_manager",
        "description": "src.utils.stylesheet_manager",
        "isExtraImport": true,
        "detail": "src.utils.stylesheet_manager",
        "documentation": {}
    },
    {
        "label": "StyleSheetManager",
        "importPath": "src.utils.stylesheet_manager",
        "description": "src.utils.stylesheet_manager",
        "isExtraImport": true,
        "detail": "src.utils.stylesheet_manager",
        "documentation": {}
    },
    {
        "label": "StyleSheetManager",
        "importPath": "src.utils.stylesheet_manager",
        "description": "src.utils.stylesheet_manager",
        "isExtraImport": true,
        "detail": "src.utils.stylesheet_manager",
        "documentation": {}
    },
    {
        "label": "StyleSheetManager",
        "importPath": "src.utils.stylesheet_manager",
        "description": "src.utils.stylesheet_manager",
        "isExtraImport": true,
        "detail": "src.utils.stylesheet_manager",
        "documentation": {}
    },
    {
        "label": "TaskWorker",
        "importPath": "src.gui.event.task_worker",
        "description": "src.gui.event.task_worker",
        "isExtraImport": true,
        "detail": "src.gui.event.task_worker",
        "documentation": {}
    },
    {
        "label": "TaskWorker",
        "importPath": "src.gui.event.task_worker",
        "description": "src.gui.event.task_worker",
        "isExtraImport": true,
        "detail": "src.gui.event.task_worker",
        "documentation": {}
    },
    {
        "label": "EventEmitter",
        "importPath": "src.gui.event.event_emitter",
        "description": "src.gui.event.event_emitter",
        "isExtraImport": true,
        "detail": "src.gui.event.event_emitter",
        "documentation": {}
    },
    {
        "label": "EventEmitter",
        "importPath": "src.gui.event.event_emitter",
        "description": "src.gui.event.event_emitter",
        "isExtraImport": true,
        "detail": "src.gui.event.event_emitter",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "AboutDialog",
        "importPath": "src.gui.dialogs.about_dialog",
        "description": "src.gui.dialogs.about_dialog",
        "isExtraImport": true,
        "detail": "src.gui.dialogs.about_dialog",
        "documentation": {}
    },
    {
        "label": "CSVViewer",
        "importPath": "src.gui.dialogs.csv_table_viewer",
        "description": "src.gui.dialogs.csv_table_viewer",
        "isExtraImport": true,
        "detail": "src.gui.dialogs.csv_table_viewer",
        "documentation": {}
    },
    {
        "label": "ProgramSettingsDialog",
        "importPath": "src.gui.dialogs.program_settings_dialog",
        "description": "src.gui.dialogs.program_settings_dialog",
        "isExtraImport": true,
        "detail": "src.gui.dialogs.program_settings_dialog",
        "documentation": {}
    },
    {
        "label": "AccountSettingsDialog",
        "importPath": "src.gui.dialogs.account_settings_dialog",
        "description": "src.gui.dialogs.account_settings_dialog",
        "isExtraImport": true,
        "detail": "src.gui.dialogs.account_settings_dialog",
        "documentation": {}
    },
    {
        "label": "LogViewerDialog",
        "importPath": "src.gui.dialogs.log_viewer_dialog",
        "description": "src.gui.dialogs.log_viewer_dialog",
        "isExtraImport": true,
        "detail": "src.gui.dialogs.log_viewer_dialog",
        "documentation": {}
    },
    {
        "label": "RandomUniqueSelector",
        "importPath": "src.utils.random_selector",
        "description": "src.utils.random_selector",
        "isExtraImport": true,
        "detail": "src.utils.random_selector",
        "documentation": {}
    },
    {
        "label": "StarterButton",
        "importPath": "src.gui.widgets.starter_button",
        "description": "src.gui.widgets.starter_button",
        "isExtraImport": true,
        "detail": "src.gui.widgets.starter_button",
        "documentation": {}
    },
    {
        "label": "Platform",
        "importPath": "src.core.platform",
        "description": "src.core.platform",
        "isExtraImport": true,
        "detail": "src.core.platform",
        "documentation": {}
    },
    {
        "label": "AccountCheckDialog",
        "importPath": "src.gui.dialogs.account_check_dialog",
        "description": "src.gui.dialogs.account_check_dialog",
        "isExtraImport": true,
        "detail": "src.gui.dialogs.account_check_dialog",
        "documentation": {}
    },
    {
        "label": "resources_rc",
        "importPath": "src.gui.resources",
        "description": "src.gui.resources",
        "isExtraImport": true,
        "detail": "src.gui.resources",
        "documentation": {}
    },
    {
        "label": "ExitDialog",
        "importPath": "src.gui.dialogs.exit_dialog",
        "description": "src.gui.dialogs.exit_dialog",
        "isExtraImport": true,
        "detail": "src.gui.dialogs.exit_dialog",
        "documentation": {}
    },
    {
        "label": "StatusChecker",
        "importPath": "src.gui.dialogs.exit_dialog",
        "description": "src.gui.dialogs.exit_dialog",
        "isExtraImport": true,
        "detail": "src.gui.dialogs.exit_dialog",
        "documentation": {}
    },
    {
        "label": "toml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "toml",
        "description": "toml",
        "detail": "toml",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "src.utils.config",
        "description": "src.utils.config",
        "isExtraImport": true,
        "detail": "src.utils.config",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "tkinter.messagebox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter.messagebox",
        "description": "tkinter.messagebox",
        "detail": "tkinter.messagebox",
        "documentation": {}
    },
    {
        "label": "pkg_resources",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pkg_resources",
        "description": "pkg_resources",
        "detail": "pkg_resources",
        "documentation": {}
    },
    {
        "label": "GlobalErrorHandler",
        "importPath": "src.core.global_error_handler",
        "description": "src.core.global_error_handler",
        "isExtraImport": true,
        "detail": "src.core.global_error_handler",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "importPath": "src.gui.main_window",
        "description": "src.gui.main_window",
        "isExtraImport": true,
        "detail": "src.gui.main_window",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(f'Path \"{location}\" does not exist!')\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to\n    setup the environment correctly.",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to PythonXX\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to PythonXX\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created  # type: ignore[used-before-def]\n    # 3.10 stopped supporting bdist_wininst, but we can still build them with 3.9.",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "env.Scripts.pywin32_postinstall",
        "description": "env.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to PythonXX\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created  # type: ignore[used-before-def]\n    # 3.10 stopped supporting bdist_wininst, but we can still build them with 3.9.\n    # This can be kept until Python 3.9 or exe installers support is dropped.",
        "detail": "env.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_testall",
        "description": "env.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "env.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_testall",
        "description": "env.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "env.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "env.Scripts.pywin32_testall",
        "description": "env.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "env.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": "env.Scripts.pywin32_testall",
        "description": "env.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": "env.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "env.Scripts.pywin32_testall",
        "description": "env.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": "env.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "env.Scripts.pywin32_testall",
        "description": "env.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "env.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "Encryption",
        "kind": 6,
        "importPath": "src.core.encryption",
        "description": "src.core.encryption",
        "peekOfCode": "class Encryption:\n    def __init__(self, key_file_dir_path: str, settings: QSettings,\n                 encrypted_keys: Optional[Set[str]]) -> None:\n        self.key_file = Path.joinpath(\n            Path(key_file_dir_path), 'SWAN_MEGA_KEY.bin')\n        logger.debug('key_file_dir_path: %s' % key_file_dir_path)\n        logger.debug('Encryption Key path: %s' % self.key_file)\n        self._ensure_encryption_key()\n        self.settings = settings\n        # 默认加密",
        "detail": "src.core.encryption",
        "documentation": {}
    },
    {
        "label": "GlobalErrorHandler",
        "kind": 6,
        "importPath": "src.core.global_error_handler",
        "description": "src.core.global_error_handler",
        "peekOfCode": "class GlobalErrorHandler:\n    @staticmethod\n    def handle_exception(exc_type, exc_value, exc_traceback):\n        \"\"\"处理未捕获的异常\"\"\"\n        # 获取错误信息\n        error_info = ''.join(\n            traceback.format_exception(exc_type, exc_value, exc_traceback))\n        # 如果是在Qt应用程序中\n        app = QApplication.instance()\n        if app is not None:",
        "detail": "src.core.global_error_handler",
        "documentation": {}
    },
    {
        "label": "Location",
        "kind": 6,
        "importPath": "src.core.location",
        "description": "src.core.location",
        "peekOfCode": "class Location(Enum):\n    SHUHE_TOWN = 'https://www.dianping.com/shop/iDYbcrjcbQJyvJyu/review_all'\n    BAISHA_TOWN = 'https://www.dianping.com/shop/k6ttY31GVwu40nbW/review_all'",
        "detail": "src.core.location",
        "documentation": {}
    },
    {
        "label": "Platform",
        "kind": 6,
        "importPath": "src.core.platform",
        "description": "src.core.platform",
        "peekOfCode": "class Platform(Enum):\n    DAZHONGDIANPING = 0      # 大众点评\n    XIECHENG        = 1       # 美团\n    RED             = 2       # 小红书",
        "detail": "src.core.platform",
        "documentation": {}
    },
    {
        "label": "Swan",
        "kind": 6,
        "importPath": "src.core.swan",
        "description": "src.core.swan",
        "peekOfCode": "class Swan():\n    _swan_version = '1.0.0'\n    log_file_path = ''\n    data_directory = ''\n    land_page_location = 'Lijiang'\n    start_time = 0.0\n    settings: QSettings\n    location: Location = None\n    chromium_tabs: list = []\n    chromium_options = ChromiumOptions",
        "detail": "src.core.swan",
        "documentation": {}
    },
    {
        "label": "comment_swan_main",
        "kind": 2,
        "importPath": "src.core.swan",
        "description": "src.core.swan",
        "peekOfCode": "def comment_swan_main():\n    swan = Swan('./swan.config.toml').launch()\n    try:\n        swan.task_dzdp()\n    except KeyboardInterrupt:\n        swan.grace_shutdown()\n        sys.exit(0)\nif __name__ == '__main__':\n    comment_swan_main()",
        "detail": "src.core.swan",
        "documentation": {}
    },
    {
        "label": "AboutDialog",
        "kind": 6,
        "importPath": "src.gui.dialogs.about_dialog",
        "description": "src.gui.dialogs.about_dialog",
        "peekOfCode": "class AboutDialog(QDialog):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"关于\")\n        self.setFixedWidth(450)\n        layout = QVBoxLayout()\n        content_layout = QHBoxLayout()\n        v_layout = QVBoxLayout()\n        button_layout = QHBoxLayout()\n        image_layout = QVBoxLayout()",
        "detail": "src.gui.dialogs.about_dialog",
        "documentation": {}
    },
    {
        "label": "AccountCheckDialog",
        "kind": 6,
        "importPath": "src.gui.dialogs.account_check_dialog",
        "description": "src.gui.dialogs.account_check_dialog",
        "peekOfCode": "class AccountCheckDialog(QDialog):\n    def __init__(self, parent: QWidget, message = str) -> None:\n        super().__init__(parent)\n        self.setWindowTitle('账号配置出错啦')\n        self.setFixedWidth(400)\n        self.assent_button = QPushButton('明白了')\n        self.assent_button.setFixedWidth(100)\n        self.assent_button.clicked.connect(self._on_assent_button_click)\n        layout = QVBoxLayout()\n        btn_layout = QHBoxLayout()",
        "detail": "src.gui.dialogs.account_check_dialog",
        "documentation": {}
    },
    {
        "label": "AccountSettingsDialog",
        "kind": 6,
        "importPath": "src.gui.dialogs.account_settings_dialog",
        "description": "src.gui.dialogs.account_settings_dialog",
        "peekOfCode": "class AccountSettingsDialog(QDialog):\n    def __init__(self, settings: QSettings, parent=None):\n        super().__init__(parent)\n        self.settings = settings\n        self.setWindowTitle(\"账号设置\")\n        self.setFixedSize(300, 500)\n        # 账号密码项\n        self.encryption = Encryption(\n            self.settings.value('encryption_dir_path', './bin'), self.settings,\n            None)",
        "detail": "src.gui.dialogs.account_settings_dialog",
        "documentation": {}
    },
    {
        "label": "CSVTableModel",
        "kind": 6,
        "importPath": "src.gui.dialogs.csv_table_viewer",
        "description": "src.gui.dialogs.csv_table_viewer",
        "peekOfCode": "class CSVTableModel(QAbstractTableModel):\n    def __init__(self, data):\n        super().__init__()\n        self._data = data\n    def rowCount(self, index):\n        return len(self._data)\n    def columnCount(self, index):\n        return len(self._data.columns)\n    def data(self, index, role=Qt.ItemDataRole.DisplayRole):\n        if role == Qt.ItemDataRole.DisplayRole:",
        "detail": "src.gui.dialogs.csv_table_viewer",
        "documentation": {}
    },
    {
        "label": "CSVViewer",
        "kind": 6,
        "importPath": "src.gui.dialogs.csv_table_viewer",
        "description": "src.gui.dialogs.csv_table_viewer",
        "peekOfCode": "class CSVViewer(QMainWindow):\n    def __init__(self, default_dir=None):\n        super().__init__()\n        self.setWindowIcon(IconLoader.load_icon())\n        self.default_dir = default_dir or os.path.expanduser(\"~\")\n        self.current_file = None\n        self.watcher = QFileSystemWatcher()\n        self.watcher.fileChanged.connect(self.handle_file_changed)\n        self.scroll_positions = {'vertical': 0, 'horizontal': 0}\n        self.setup_ui()",
        "detail": "src.gui.dialogs.csv_table_viewer",
        "documentation": {}
    },
    {
        "label": "ErrorDialog",
        "kind": 6,
        "importPath": "src.gui.dialogs.error_dialog",
        "description": "src.gui.dialogs.error_dialog",
        "peekOfCode": "class ErrorDialog(QDialog):\n    def __init__(self, error_info, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Oops, Swan崩溃了!\")\n        self.setMinimumWidth(600)\n        self.setMinimumHeight(300)\n        self.setWindowIcon(IconLoader.load_icon())\n        self.setStyleSheet(StyleSheetManager.fluent_like_style())\n        # 创建主布局\n        main_layout = QVBoxLayout()",
        "detail": "src.gui.dialogs.error_dialog",
        "documentation": {}
    },
    {
        "label": "StatusChecker",
        "kind": 6,
        "importPath": "src.gui.dialogs.exit_dialog",
        "description": "src.gui.dialogs.exit_dialog",
        "peekOfCode": "class StatusChecker(QThread):\n    status_changed = Signal(bool)\n    def __init__(self, task_worker : TaskWorker = None):\n        super().__init__()\n        # 这里可以添加需要检查的状态变量\n        self.is_running = True\n        self.task_worker = task_worker\n    def check_status(self) -> bool:\n        # 在这里实现您的状态检测逻辑\n        # 返回True表示任务完成，返回False表示任务未完成",
        "detail": "src.gui.dialogs.exit_dialog",
        "documentation": {}
    },
    {
        "label": "ExitDialog",
        "kind": 6,
        "importPath": "src.gui.dialogs.exit_dialog",
        "description": "src.gui.dialogs.exit_dialog",
        "peekOfCode": "class ExitDialog(QDialog):\n    def __init__(self, task_worker : TaskWorker = None, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Swan\")\n        self.setWindowIcon(IconLoader.load_icon())\n        self.setFixedSize(300, 100)\n        self.setStyleSheet(\"\"\"\n            QProgressBar {\n                border: 1px solid grey;\n                border-radius: 5px;",
        "detail": "src.gui.dialogs.exit_dialog",
        "documentation": {}
    },
    {
        "label": "LogViewerDialog",
        "kind": 6,
        "importPath": "src.gui.dialogs.log_viewer_dialog",
        "description": "src.gui.dialogs.log_viewer_dialog",
        "peekOfCode": "class LogViewerDialog(QDialog):\n    def __init__(self, settings: QSettings, parent=None):\n        super().__init__(parent)\n        self.setWindowIcon(IconLoader.load_icon())\n        self.setWindowTitle(\"日志查看器\")\n        self.resize(800, 600)\n        self.settings = settings\n        # 应用样式\n        self.setStyleSheet(StyleSheetManager.fluent_like_style())\n        # 创建主布局",
        "detail": "src.gui.dialogs.log_viewer_dialog",
        "documentation": {}
    },
    {
        "label": "ProgramSettingsDialog",
        "kind": 6,
        "importPath": "src.gui.dialogs.program_settings_dialog",
        "description": "src.gui.dialogs.program_settings_dialog",
        "peekOfCode": "class ProgramSettingsDialog(QDialog):\n    def __init__(self, settings: QSettings, parent=None):\n        super().__init__(parent)\n        self.settings = settings\n        # 从QSettings中加载设置或使用默认值\n        self.config_path = QLineEdit(\n            self.settings.value('config_path', './swan.config.toml'))\n        self.log_path = QLineEdit(\n            self.settings.value('log_path', './logs/swan.log'))\n        self.chrome_executable_path = QLineEdit(",
        "detail": "src.gui.dialogs.program_settings_dialog",
        "documentation": {}
    },
    {
        "label": "EventEmitter",
        "kind": 6,
        "importPath": "src.gui.event.event_emitter",
        "description": "src.gui.event.event_emitter",
        "peekOfCode": "class EventEmitter(QObject):\n    progress_updated = Signal(int, int)  # current_page, total_pages\n    def emit_progress(self, current: int, total: int):\n        self.progress_updated.emit(current, total)",
        "detail": "src.gui.event.event_emitter",
        "documentation": {}
    },
    {
        "label": "TaskProgressTracker",
        "kind": 6,
        "importPath": "src.gui.event.task_progress_tracker",
        "description": "src.gui.event.task_progress_tracker",
        "peekOfCode": "class TaskProgressTracker:\n    def __init__(self, emitter: EventEmitter):\n        self.emitter = emitter\n        self._current_page = 0\n        self._total_pages = 0\n    @property\n    def current_page(self) -> int:\n        return self._current_page\n    @current_page.setter\n    def current_page(self, value: int):",
        "detail": "src.gui.event.task_progress_tracker",
        "documentation": {}
    },
    {
        "label": "TaskWorker",
        "kind": 6,
        "importPath": "src.gui.event.task_worker",
        "description": "src.gui.event.task_worker",
        "peekOfCode": "class TaskWorker(QThread):\n    finished = Signal(bool)\n    error = Signal(str)\n    def __init__(self, swan: Swan, location: Location):\n        super().__init__()\n        self.swan = swan\n        # self.location = location\n        self.swan.set_location(location)\n        logger.debug('Current Location (in task_worker): %s' % self.swan.location)\n        self._is_running = True",
        "detail": "src.gui.event.task_worker",
        "documentation": {}
    },
    {
        "label": "qInitResources",
        "kind": 2,
        "importPath": "src.gui.resources.resources_rc",
        "description": "src.gui.resources.resources_rc",
        "peekOfCode": "def qInitResources():\n    QtCore.qRegisterResourceData(0x03, qt_resource_struct, qt_resource_name, qt_resource_data)\ndef qCleanupResources():\n    QtCore.qUnregisterResourceData(0x03, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "src.gui.resources.resources_rc",
        "documentation": {}
    },
    {
        "label": "qCleanupResources",
        "kind": 2,
        "importPath": "src.gui.resources.resources_rc",
        "description": "src.gui.resources.resources_rc",
        "peekOfCode": "def qCleanupResources():\n    QtCore.qUnregisterResourceData(0x03, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "src.gui.resources.resources_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_data",
        "kind": 5,
        "importPath": "src.gui.resources.resources_rc",
        "description": "src.gui.resources.resources_rc",
        "peekOfCode": "qt_resource_data = b\"\\\n\\x00\\x00\\x12\\x9b\\\n{\\\n\\x0d\\x0a  \\x22sayings\\x22: [\\\n\\x0d\\x0a    \\x22\\xe8\\xaf\\xb4\\xe7\\x9a\\x84\\xe8\\xaf\\x9d\\\n\\xe4\\xb8\\xba\\xe4\\xbb\\x80\\xe4\\xb9\\x88\\xe4\\xb8\\x8d\\xe8\\xae\\xb0\\xe5\\\n\\xbe\\x97\\xef\\xbc\\x8c\\xe4\\xb8\\xba\\xe4\\xbb\\x80\\xe4\\xb9\\x88\\xe4\\xb8\\\n\\x8d\\xe8\\xae\\xb0\\xe5\\xbe\\x97\\x22,\\x0d\\x0a    \\x22\\\n\\xe6\\x98\\xaf\\xe7\\x8e\\xb0\\xe5\\x9c\\xa8\\xe6\\x88\\x91\\xe6\\x89\\x80\\xe6\\\n\\x9c\\x89\\xe6\\x9c\\x9f\\xe5\\xbe\\x85\\xef\\xbc\\x8c\\xe6\\x89\\x80\\xe6\\x9c\\",
        "detail": "src.gui.resources.resources_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_name",
        "kind": 5,
        "importPath": "src.gui.resources.resources_rc",
        "description": "src.gui.resources.resources_rc",
        "peekOfCode": "qt_resource_name = b\"\\\n\\x00\\x05\\\n\\x00o\\xa6S\\\n\\x00i\\\n\\x00c\\x00o\\x00n\\x00s\\\n\\x00\\x06\\\n\\x07\\x03}\\xc3\\\n\\x00i\\\n\\x00m\\x00a\\x00g\\x00e\\x00s\\\n\\x00\\x07\\",
        "detail": "src.gui.resources.resources_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_struct",
        "kind": 5,
        "importPath": "src.gui.resources.resources_rc",
        "description": "src.gui.resources.resources_rc",
        "peekOfCode": "qt_resource_struct = b\"\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x08\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x10\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x05\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x22\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x04\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x006\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\",
        "detail": "src.gui.resources.resources_rc",
        "documentation": {}
    },
    {
        "label": "StarterButton",
        "kind": 6,
        "importPath": "src.gui.widgets.starter_button",
        "description": "src.gui.widgets.starter_button",
        "peekOfCode": "class StarterButton(QPushButton):\n    def __init__(self, pixmap, parent=None):\n        super().__init__(parent)\n        # 使用 QPixmap 加载图片\n        self.pixmap = pixmap\n        # 将 QPixmap 转换为 QIcon\n        icon = QIcon(pixmap)\n        # 设置按钮的图标\n        self.setIcon(icon)\n        # 设置图标大小",
        "detail": "src.gui.widgets.starter_button",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "src.gui.main_window",
        "description": "src.gui.main_window",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        profile = \"Ming\" if getenv(\"APP_PROFILE\") == \"ming\" else \"\"\n        if profile != '':\n            self.setWindowTitle(f\"Swan - {profile}\")\n        else:\n            self.setWindowTitle('Swan')\n        self.resize(800, 600)\n        # 设置应用Icon",
        "detail": "src.gui.main_window",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "src.utils.config",
        "description": "src.utils.config",
        "peekOfCode": "class Config:\n    __config_obj = None\n    __config_file_path = ''\n    def __init__(self, config_file_path) -> None:\n        if not os.path.exists(config_file_path):\n            raise FileNotFoundError('Cannot find the config file at %s' %\n                                    config_file_path)\n        config = toml.load(config_file_path)\n        self.__config_file_path = config_file_path\n        self.__config_obj = config",
        "detail": "src.utils.config",
        "documentation": {}
    },
    {
        "label": "IconLoader",
        "kind": 6,
        "importPath": "src.utils.icon_loader",
        "description": "src.utils.icon_loader",
        "peekOfCode": "class IconLoader():\n    def __init__(self) -> None:\n        pass\n    @staticmethod\n    def load_icon():\n        global SWAN_ICON\n        if SWAN_ICON == None:\n            pixmap = QPixmap(\":/images/swan_icon.png\")\n            SWAN_ICON = QIcon(pixmap)\n        return SWAN_ICON",
        "detail": "src.utils.icon_loader",
        "documentation": {}
    },
    {
        "label": "SWAN_ICON",
        "kind": 5,
        "importPath": "src.utils.icon_loader",
        "description": "src.utils.icon_loader",
        "peekOfCode": "SWAN_ICON = None\nclass IconLoader():\n    def __init__(self) -> None:\n        pass\n    @staticmethod\n    def load_icon():\n        global SWAN_ICON\n        if SWAN_ICON == None:\n            pixmap = QPixmap(\":/images/swan_icon.png\")\n            SWAN_ICON = QIcon(pixmap)",
        "detail": "src.utils.icon_loader",
        "documentation": {}
    },
    {
        "label": "RandomUniqueSelector",
        "kind": 6,
        "importPath": "src.utils.random_selector",
        "description": "src.utils.random_selector",
        "peekOfCode": "class RandomUniqueSelector:\n    def __init__(self, items):\n        self.items = items[:]  # 原始列表的副本\n        self.reset()\n    def reset(self):\n        self.current_items = self.items[:]\n        random.shuffle(self.current_items)  # 打乱顺序以确保随机性\n        self.index = 0\n    def get_next(self):\n        if self.index >= len(self.current_items):",
        "detail": "src.utils.random_selector",
        "documentation": {}
    },
    {
        "label": "StyleSheetManager",
        "kind": 6,
        "importPath": "src.utils.stylesheet_manager",
        "description": "src.utils.stylesheet_manager",
        "peekOfCode": "class StyleSheetManager():\n    def __init__(self) -> None:\n        pass\n    @staticmethod\n    def fluent_like_style():\n        return \"\"\"\n        /* 全局样式 */\n        * {\n            font-family: \"Segoe UI\", \"Microsoft YaHei\";\n            color: #2b2b2b;",
        "detail": "src.utils.stylesheet_manager",
        "documentation": {}
    },
    {
        "label": "load_json",
        "kind": 2,
        "importPath": "src.utils.text",
        "description": "src.utils.text",
        "peekOfCode": "def load_json(qt_resource_path : str) -> dict:\n    json_file = QFile(qt_resource_path)\n    if not json_file.open(QFile.OpenModeFlag.ReadOnly | QFile.OpenModeFlag.Text):\n        logger.error(f\"Cannot open file {qt_resource_path} for reading.\")\n        return {}\n    stream = QTextStream(json_file)\n    json_data = stream.readAll()\n    json_file.close()\n    try:\n        return json.loads(json_data)",
        "detail": "src.utils.text",
        "documentation": {}
    },
    {
        "label": "extract_update_date",
        "kind": 2,
        "importPath": "src.utils.text",
        "description": "src.utils.text",
        "peekOfCode": "def extract_update_date(text):\n    # 使用正则表达式匹配“更新于”后面的日期\n    # \\s* 表示任意数量的空白字符（包括空格、制表符、换行符等）\n    # \\d{4}-\\d{2}-\\d{2} 表示 YYYY-MM-DD 格式的日期\n    # \\s*\\d{2}:\\d{2} 表示 HH:MM 格式的时分\n    match = re.search(r'更新于\\s*(\\d{4}-\\d{2}-\\d{2}\\s*\\d{2}:\\d{2})', text)\n    if match:\n        # 提取匹配的日期和时间\n        update_date = match.group(1).strip()\n        return update_date",
        "detail": "src.utils.text",
        "documentation": {}
    },
    {
        "label": "sanitize_text",
        "kind": 2,
        "importPath": "src.utils.text",
        "description": "src.utils.text",
        "peekOfCode": "def sanitize_text(text: str, remove_all: bool = True) -> str:\n    if remove_all:\n        return re.sub(r'\\s+', '', text.strip())\n    else:\n        return text.strip()\ndef extract_and_convert_score(text: str):\n    # 定义映射关系\n    score_mapping = {\n        'sml-str5': 0.5,\n        'sml-str10': 1.0,",
        "detail": "src.utils.text",
        "documentation": {}
    },
    {
        "label": "extract_and_convert_score",
        "kind": 2,
        "importPath": "src.utils.text",
        "description": "src.utils.text",
        "peekOfCode": "def extract_and_convert_score(text: str):\n    # 定义映射关系\n    score_mapping = {\n        'sml-str5': 0.5,\n        'sml-str10': 1.0,\n        'sml-str15': 1.5,\n        'sml-str20': 2.0,\n        'sml-str25': 2.5,\n        'sml-str30': 3.0,\n        'sml-str35': 3.5,",
        "detail": "src.utils.text",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "tests.test",
        "description": "tests.test",
        "peekOfCode": "config = Config('./swan.config.toml')\nc = config.load()\n# print(c['account']['test']['username'])\n# c['account']['test']['username'] = 'jjj'\n# print(c['account']['test']['username'])\n# config.save()\nprint(c['account']['dzdp']['page_maximum'])\nprint(Path.joinpath(Path(c['application']['data_directory']), 'dazhongdianping.xlsx'))\nsd = 'sdsdsds'\ns = [sd]",
        "detail": "tests.test",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "tests.test",
        "description": "tests.test",
        "peekOfCode": "c = config.load()\n# print(c['account']['test']['username'])\n# c['account']['test']['username'] = 'jjj'\n# print(c['account']['test']['username'])\n# config.save()\nprint(c['account']['dzdp']['page_maximum'])\nprint(Path.joinpath(Path(c['application']['data_directory']), 'dazhongdianping.xlsx'))\nsd = 'sdsdsds'\ns = [sd]\nprint(s)",
        "detail": "tests.test",
        "documentation": {}
    },
    {
        "label": "sd",
        "kind": 5,
        "importPath": "tests.test",
        "description": "tests.test",
        "peekOfCode": "sd = 'sdsdsds'\ns = [sd]\nprint(s)\nprint(sd)\n# chrome_executable_path = Path(config['application']['chrome_executable_path'])\n# print(os.path.exists(chrome_executable_path))",
        "detail": "tests.test",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "tests.test",
        "description": "tests.test",
        "peekOfCode": "s = [sd]\nprint(s)\nprint(sd)\n# chrome_executable_path = Path(config['application']['chrome_executable_path'])\n# print(os.path.exists(chrome_executable_path))",
        "detail": "tests.test",
        "documentation": {}
    },
    {
        "label": "extract_update_date",
        "kind": 2,
        "importPath": "tests.test_date",
        "description": "tests.test_date",
        "peekOfCode": "def extract_update_date(text):\n    # 使用正则表达式匹配“更新于”后面的日期\n    # \\s* 表示任意数量的空白字符（包括空格、制表符、换行符等）\n    # \\d{4}-\\d{2}-\\d{2} 表示 YYYY-MM-DD 格式的日期\n    # \\s*\\d{2}:\\d{2} 表示 HH:MM 格式的时分\n    match = re.search(r'更新于\\s*(\\d{4}-\\d{2}-\\d{2}\\s*\\d{2}:\\d{2})', text)\n    if match:\n        # 提取匹配的日期和时间\n        update_date = match.group(1).strip()\n        return update_date",
        "detail": "tests.test_date",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "tests.test_date",
        "description": "tests.test_date",
        "peekOfCode": "text = \"\"\"\n                                2024-10-10\n  更新于2024-10-12 09:12                            \n\"\"\"\n# 提取更新日期\n# update_date = extract_update_date(text)\n# if update_date:\n#     print(f\"提取的更新日期: {update_date}\")\n# else:\n#     print(\"未找到更新日期\")",
        "detail": "tests.test_date",
        "documentation": {}
    },
    {
        "label": "show_about",
        "kind": 2,
        "importPath": "tests.test_gui",
        "description": "tests.test_gui",
        "peekOfCode": "def show_about():\n    message = f\"\"\"\n    Swan (天鹅)\n    为了完成这该死的论文开发的程序，能够方便的爬取网络文本。\n    作者: Elias\n    版本号: 1.0.0\n    操作系统: %s\n    Python版本: %s (%s)\n    编译日期: 2024.11.16\n    \"\"\" % (platform.platform(), platform.python_version(), platform.python_compiler())",
        "detail": "tests.test_gui",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "tests.test_gui",
        "description": "tests.test_gui",
        "peekOfCode": "window = tk.Tk()\nwindow.title('Swan - Default Mode')\nwindow.geometry('800x500')\nmenu_bar = tk.Menu(window)\nwindow.config(menu=menu_bar)\n# file menu\n# file_menu = tk.Menu(menu_bar, tearoff=0)\n# menu_bar.add_cascade(label='文件', menu=file_menu)\n# file_menu.add_command(label='打开 (Open)')\n# file_menu.add_separator()",
        "detail": "tests.test_gui",
        "documentation": {}
    },
    {
        "label": "menu_bar",
        "kind": 5,
        "importPath": "tests.test_gui",
        "description": "tests.test_gui",
        "peekOfCode": "menu_bar = tk.Menu(window)\nwindow.config(menu=menu_bar)\n# file menu\n# file_menu = tk.Menu(menu_bar, tearoff=0)\n# menu_bar.add_cascade(label='文件', menu=file_menu)\n# file_menu.add_command(label='打开 (Open)')\n# file_menu.add_separator()\n# file_menu.add_command(label='关闭 (Close)')\n# setting menu\nsetting_menu = tk.Menu(menu_bar, tearoff=0)",
        "detail": "tests.test_gui",
        "documentation": {}
    },
    {
        "label": "setting_menu",
        "kind": 5,
        "importPath": "tests.test_gui",
        "description": "tests.test_gui",
        "peekOfCode": "setting_menu = tk.Menu(menu_bar, tearoff=0)\nmenu_bar.add_cascade(label='设置', menu=setting_menu)\nsetting_menu.add_command(label='程序设置 (Ctrl + E)')\nsetting_menu.add_command(label='账号设置 (Ctrl + R)')\ndef show_about():\n    message = f\"\"\"\n    Swan (天鹅)\n    为了完成这该死的论文开发的程序，能够方便的爬取网络文本。\n    作者: Elias\n    版本号: 1.0.0",
        "detail": "tests.test_gui",
        "documentation": {}
    },
    {
        "label": "extract_and_convert_score",
        "kind": 2,
        "importPath": "tests.test_score",
        "description": "tests.test_score",
        "peekOfCode": "def extract_and_convert_score(text):\n    # 定义映射关系\n    score_mapping = {\n        'sml-str5': 0.5,\n        'sml-str10': 1.0,\n        'sml-str15': 1.5,\n        'sml-str20': 2.0,\n        'sml-str25': 2.5,\n        'sml-str30': 3.0,\n        'sml-str35': 3.5,",
        "detail": "tests.test_score",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "tests.test_score",
        "description": "tests.test_score",
        "peekOfCode": "s = extract_and_convert_score(\"sml-rank-stars sml-str45 star\")\nprint(s)",
        "detail": "tests.test_score",
        "documentation": {}
    },
    {
        "label": "get_installed_packages",
        "kind": 2,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "def get_installed_packages():\n    \"\"\"获取已安装的包及其版本\"\"\"\n    return [(dist.key, dist.version) for dist in pkg_resources.working_set]\ndef analyze_environment():\n    \"\"\"分析构建环境\"\"\"\n    print(\"=== Environment Analysis ===\")\n    print(f\"Python Version: {sys.version}\")\n    print(f\"Python Path: {sys.executable}\")\n    print(f\"Virtual Env: {os.environ.get('VIRTUAL_ENV', 'Not in a virtual environment')}\")\n    print(\"\\nInstalled Packages:\")",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "analyze_environment",
        "kind": 2,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "def analyze_environment():\n    \"\"\"分析构建环境\"\"\"\n    print(\"=== Environment Analysis ===\")\n    print(f\"Python Version: {sys.version}\")\n    print(f\"Python Path: {sys.executable}\")\n    print(f\"Virtual Env: {os.environ.get('VIRTUAL_ENV', 'Not in a virtual environment')}\")\n    print(\"\\nInstalled Packages:\")\n    for package, version in get_installed_packages():\n        print(f\"  - {package} ({version})\")\n    print(\"=\"*30)",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "build",
        "kind": 2,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "def build():\n    analyze_environment()\n    venv_path = os.environ.get('VIRTUAL_ENV')\n    if not venv_path:\n        print(\"Warning: Not running in a virtual environment!\")\n        user_input = input(\"Continue anyway? (y/n): \")\n        if user_input.lower() != 'y':\n            return 1\n    python_path = str(Path(venv_path) / \"Scripts\" / \"python.exe\") if venv_path else sys.executable\n    site_packages = str(Path(venv_path) / \"Lib\" / \"site-packages\") if venv_path else \"\"",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "configs",
        "kind": 5,
        "importPath": "buildConfig",
        "description": "buildConfig",
        "peekOfCode": "configs = {\n    \"ming\": {\n        \"title\": \"Swan - Ming\",\n        \"debug\": False\n    },\n    \"test\": {\n        \"title\": \"Swan - Test\",\n        \"debug\": True\n    },\n    \"prod\": {",
        "detail": "buildConfig",
        "documentation": {}
    },
    {
        "label": "exception_hook",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def exception_hook(exc_type, exc_value, exc_traceback):\n    \"\"\"Qt异常钩子\"\"\"\n    # 不处理键盘中断异常\n    if issubclass(exc_type, KeyboardInterrupt):\n        sys.__excepthook__(exc_type, exc_value, exc_traceback)\n        return\n    GlobalErrorHandler.handle_exception(exc_type, exc_value, exc_traceback)\ndef main():\n    # 设置全局异常处理\n    sys.excepthook = exception_hook",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    # 设置全局异常处理\n    sys.excepthook = exception_hook\n    # Windows 10/11 风格设置\n    QApplication.setStyle(\"Macintosh\")\n    app = QApplication(sys.argv)\n    # 设置Qt的异常处理\n    window = MainWindow()\n    window.setStyleSheet(StyleSheetManager.fluent_like_style())\n    window.show()",
        "detail": "main",
        "documentation": {}
    }
]